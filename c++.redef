cdef "^":"#include <unordered_map>
#include <stdexcept>
#include <iostream>
#include <string>
#include <deque>
std::deque<double> stack;
std::unordered_map<long long, double> memory;
std::deque<double> pop_x(unsigned long long x) {
	std::deque<double> result;
	unsigned long long size = stack.size();
	for (unsigned long long i = 0; i < x; i++) {
		if (i < size) {
			result.push_back(stack.front());
			stack.pop_front();
		} else {
			result.push_back(0);
		}
	}
	return result;
}
void push(double value) {stack.push_front(value);std::cout << value << ' ' << stack.size() << std::endl;}
void load(long long key) {
	try {
		push(memory[key]);
	} catch (const std::out_of_range& oor) {
		push(0);
	}
}
void store(long long key) {
	double value = pop_x(1)[0];
	if (value) {
		memory[key] = value;
	} else {
		try {memory.erase(key);}
		catch (const std::out_of_range& oor) {}
	}
}
void plus() {push(pop_x(1)[0] + pop_x(1)[0]);}
void minus() {push(pop_x(1)[0] - pop_x(1)[0]);}
void multiply() {push(pop_x(1)[0] * pop_x(1)[0]);}
int main () {
std::string input;
"
cdef "$(?![^.])":"return 0;}"
cdef "(?P<literal_int>[0-9]+(?:\.[0-9]+)?)":"push(\1);"
cdef "\*(?P<t>[0-9]+)":"var *= \1;"
cdef "\+":"plus();"
cdef "\-":"minus();"
cdef ":=(?P<store>-?[0-9]+(?:\.[0-9]+)?)":"store(\1);"
cdef "=:(?P<load>-?[0-9]+(?:\.[0-9]+)?)":"load(\1);"
cdef "p":"std::cout << pop_x(1)[0] << std::endl;"
cdef "i":"getline(std::cin, input);try {push(std::stod(input));} catch (const std::invalid_argument& ia) {push(0);}input = {};"
