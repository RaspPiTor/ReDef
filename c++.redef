cdef "^":"#include <unordered_map>
#include <stdexcept>
#include <iostream>
#include <string>
#include <stack>
#include <math.h>
class multi {
	char type;
	std::string data_string;
	double data_double = 0;
	public:
		multi() { type = 'd'; data_double = 0.0; }
		multi(const int& val) { type = 'd'; data_double = val; }
		multi(const double&	 val) { type = 'd'; data_double = val; }
		multi(const std::string& val) { type = 's'; data_string = val; }
		multi(const char* val) { type = 's'; data_string = val; }
		multi(const char val) { type = 's'; data_string = std::string(1, val); }
		operator double() {
			if (type == 'd') { return data_double; }
			else {
				try { return std::stod(data_string); }
				catch (std::invalid_argument&) { return 0.0; }
				catch (std::out_of_range&) { return 0.0; }
			}
		}
		operator std::string() {
			if (type == 's') { return data_string; }
			else {
				try { return std::to_string(data_double); }
				catch (std::invalid_argument&) { return std::string{}; }
			}
		}
		multi operator +(multi arg) {
			if (type == 'd') { return data_double + double(arg); }
			else { return (std::string(*this) + std::string(arg)); }
		}
		multi operator -(multi arg) {
			return (double(*this) - double(arg));
		}
		multi operator *(multi arg) {
			if (type == 'd') { return data_double * double(arg); }
			else {
				std::string res;
				std::string old = *this;
				unsigned long long num = arg;
				for (unsigned int i = 0; i < num; i++) { res += old; }
				return res;
			}
		}
		multi operator /(multi arg) {
			return (double(*this) / double(arg));
		}
		multi operator %(multi arg) {
			return (fmod(double(*this), double(arg)));
		}
		multi operator +=(multi arg) { return *this = *this + arg; }
		multi operator -=(multi arg) { return *this = *this - arg; }
		multi operator *=(multi arg) { return *this = *this * arg; }
		multi operator /=(multi arg) { return *this = *this / arg; }
		multi operator %=(multi arg) { return *this = *this / arg; }
};
std::stack<multi> stack;
std::unordered_map<long long, multi> memory;
multi pop() {
	multi value;
	if (!stack.empty()) {
		value = stack.top();
		stack.pop();
	}
	else {}
	return value;
}
void store(long long key) {
	multi var = pop();
	if (var) { memory[key] = var; }
	else {
		try { memory.erase(key); }
		catch (std::out_of_range&) {}
	}
}
void load(long long key) {
	try { stack.push(memory[key]); }
	catch (std::out_of_range&) { stack.push(0.0); }
}
void plus() { stack.push(pop() + pop()); }
void minus() { stack.push(pop() - pop()); }
void multiply() { stack.push(pop() * pop()); }
void modulo() { stack.push(pop() % pop()); }
void divide() { stack.push(pop() / pop()); }
int main () {
"
cdef "$(?![^.])":"return 0;}"
cdef "(?P<literal_string>'[^'])":"stack.push(\1');"
cdef "(?P<literal_int>[0-9]+(?:\.[0-9]+)?)":"stack.push(\1);"
cdef "\*":"multiply();"
cdef "/":"divide();"
cdef "\+":"plus();"
cdef "\-":"minus();"
cdef "%":"modulo();"
cdef ":=(?P<store>-?[0-9]+(?:\.[0-9]+)?)":"store(\1);"
cdef "=:(?P<load>-?[0-9]+(?:\.[0-9]+)?)":"load(\1);"
cdef "p":"std::cout << std::string(pop()) << std::endl;"
cdef "i":"{std::string input; getline(std::cin, input); stack.push(input); }"
